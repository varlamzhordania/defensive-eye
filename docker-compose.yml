services:
  db:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./docker.env
    networks:
      - mynetwork

  redis:
    image: redis:alpine
    networks:
      - mynetwork

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      bash -c "python manage.py runserver 0.0.0.0:8000"
    #      bash -c "gunicorn -c conf/gunicorn_conf.py core.wsgi:application"
    volumes:
      - ./backend/:/home/defensive-eye
      - ./cert/:/home/defensive-eye/cert
    depends_on:
      - db
      - redis
    networks:
      - mynetwork
    env_file:
      - ./docker.env
    expose:
      - 8000
    ports:
      - "8000:8000"

  daphne:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: >
      bash -c "daphne -b 0.0.0.0 -p 8001 core.asgi:application"
#      bash -c "daphne -u /app/daphne.sock core.asgi:application"
    volumes:
      - ./backend/:/home/defensive-eye
      - ./cert/:/home/defensive-eye/cert
    depends_on:
      - db
      - redis
    networks:
      - mynetwork
    env_file:
      - ./docker.env
    expose:
      - 8001
    ports:
      - "8001:8001"

#  nginx:
#    image: nginx:alpine
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
#      - ./backend/staticfiles:/home/defensive-eye/staticfiles
#      - ./backend/media:/home/defensive-eye/media
#      - ./cert/:/home/defensive-eye/cert
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - web
#      - daphne
#    env_file:
#      - ./docker.env
#    networks:
#      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
